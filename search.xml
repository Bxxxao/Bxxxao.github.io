<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>sentence-reverse</title>
    <url>/2020/03/22/sentence-reverse/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>地址：<a href="https://www.nowcoder.com/practice/48b3cb4e3c694d9da5526e6255bb73c3?tpId=37&amp;tqId=21236&amp;tPage=1&amp;rp=&amp;ru=%2Fta%2Fhuawei&amp;qru=%2Fta%2Fhuawei%2Fquestion-ranking" target="_blank" rel="noopener">https://www.nowcoder.com/practice/48b3cb4e3c694d9da5526e6255bb73c3?tpId=37&amp;tqId=21236&amp;tPage=1&amp;rp=&amp;ru=%2Fta%2Fhuawei&amp;qru=%2Fta%2Fhuawei%2Fquestion-ranking</a></p>
<a id="more"></a>

<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>很久没有练习了，开始练一下牛客网上的题目吧（还记得当时数据结构老师每节课都叫我们回去多练练）</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>要逆序一个句子里的单词，和以前经常做的逆序输出字符串很像，不过这次是要把句子里的单词作为一个整体。所以在这里我使用了c++标准库里的栈结构stack</p>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;stack&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    stack&lt;string&gt; s;</span><br><span class="line">    string str;</span><br><span class="line">    while(cin&gt;&gt;str)&#123;</span><br><span class="line">        s.push(str);</span><br><span class="line">    &#125;</span><br><span class="line">    while(!s.empty())&#123;</span><br><span class="line">        cout&lt;&lt;s.top()&lt;&lt;&#39; &#39;;</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>今天 想写点什么</title>
    <url>/2020/01/27/%E4%BB%8A%E5%A4%A9-%E6%83%B3%E5%86%99%E7%82%B9%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<blockquote>
<p>Mamba out.<br>           —–Kobe Bryant</p>
</blockquote>
<a id="more"></a>
<h3 id="这一年的开局真的太糟糕了。"><a href="#这一年的开局真的太糟糕了。" class="headerlink" title="这一年的开局真的太糟糕了。"></a>这一年的开局真的太糟糕了。</h3><p>进入2020年，二十一世纪的第二个十年，怀着全面小康的憧憬，似乎事情一直在变好。但是这一年才刚刚过去二十多天，我们都笼罩在新型冠状病毒的阴影之下，我们痛恨乱吃野味的人，让这个新年过得异常压抑，我们痛恨趁着国难当头恶意炒高口罩的人。当然事情也似乎在慢慢变好，也有人开始从肺炎中治愈，人们也开始真正重视起了这个病毒。</p>
<p>今天，我起得很晚，一直睡到中午十二点。睁开眼睛之后，我像往常一样，拿起手边的手机，打开微信，便看到消息框里有人和我说“科比出事了”。我的第一反应便是：<em>不敢相信</em>，但是看到铺天盖地的新闻、朋友圈，才慢慢相信，这不是幻觉。</p>
<blockquote>
<p>明天和意外不知道哪一个先来，最重要的是珍惜眼前人。</p>
</blockquote>
<p>最近这一个月的事情真的真的，告诫我，<strong>平平安安</strong>就好。</p>
<p>我大概08年开始看球，当时因为爱上了篮球，也爱上了nba，开始的时候，对球员们很脸盲，只认识当年最具人气的两个球员，即便到了现在，他们两个也是人气最高的两个球员，一个名字叫<em>勒布朗詹姆斯</em>，一个便是<em>科比布莱恩特</em>。这是我最喜欢的两个球员，这么多年过去了，联盟诞生了无数个球员，他们仍是我的初心。那时候的比赛还很好看，对抗很多，比赛很流畅。不像现在一样那么疲软，动不动就皮毛犯规。那个时候，联盟还没有抱团，基本上每支球队都会一个当家球星。当初在球场上，穿23号24号的人最多，但是我觉得这很张狂，所以我后来选择球衣号码更喜欢10号，这也是科比在国家队的球衣号码。</p>
<p>当时非常期待能在总决赛上看到23vs24，这应该也是大多数人的愿望，但是09年，还是魔兽的霍华德在内线如日中天，在东决击败了小皇帝詹姆斯，23vs24又要推迟一年了，害我心里是这么想的。那一年更成熟、技术更精湛的科比击败了来势汹汹的魔兽，夺得了离开奥尼尔之后的第一个总冠军及个人首个fmvp，证明了自己也能独当一面。</p>
<p>10年，小皇帝折戟绿军，时隔一年后nba两大豪门再度重逢总决赛，科比终于在总决赛上成功复仇，拿到了自己的第五个总冠军，奥尼尔看到这一幕应该要气死了吧哈哈哈哈哈。</p>
<p>之后发生了很多事，詹姆斯远渡东海岸，联手DW、bosh，老鹰常规赛统治东部，湖人组成f4，勇士崛起引起小球风暴，以及，湖人的沉沦。</p>
<p>还能记得当年的f4，从组建时的不可一世，到后来的笑柄，科比许下承诺，无论如何也要把湖人带进季后赛。这对于当初的湖人很难，但那可是科比！只是这个代价太大了，老大拼断了自己的跟腱，换来的季后赛，在季后赛首轮便被马刺横扫出局，而科比也从此走下神坛。我曾为此很讨厌火花，好在这个赛季霍师傅很给力。</p>
<p>还记得2016年退役战，当时我高二，上完课回到宿舍，整个男生宿舍都围在一张床上看湖人和爵士的最后一节比赛。科比在最后一节大杀四方，50,52！54！..60!最后随着最后杀死比赛的罚球，科比的得分定格在60分，nba历史退役战最高分，男生宿舍如同地震一般，欢呼声响彻整个一中。我想这一幕，这辈子再也不会有了吧。随着科比的一句“Mamba out”，也带走了我们的青春。</p>
<p>退役后的科比，仍然在其他领域发光发热。商业投资、写书、拿下奥斯卡奖，似乎除了生儿子再也没有能难倒科比的事了哈哈哈哈。科比曾说过，如果在未来谈到他时，如果篮球仍是他最大的荣耀，那么他的人生便是失败的。是啊，科比是个多么骄傲的人，“第二名就是最大的输家”，这句话曾是最激励我的话，他本能在其他领域做出更多的奉献，事情本该如此…</p>
<p>科比的最后一条ins，是祝贺詹姆斯职业生涯总得分超过自己，这两个我最喜欢的球星，希望詹姆斯能带着这份力量move forward。</p>
<p>如果我是沃格尔，那么这赛季的口号我会定为： <em>for kobe.</em></p>
<p>希望今年六月份，詹姆斯能在斯台普斯球馆，面对着摄影机，喊出：<em>Kobe,this is for you!</em>就如同2016年绝地反击一样，我相信你能。</p>
<p>曼巴已逝，我希望能带着这种精神，坚定不移地走下去。</p>
<p><em>#Mamba never out.</em><br><em>#Rest in peace.</em><br><em>#1978-2020</em></p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://inews.gtimg.com/newsapp_bt/0/11260072167/641" alt="Kobe byrant"></h2>]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>casual</tag>
      </tags>
  </entry>
  <entry>
    <title>167. Two Sum II - Input array is sorted (Easy)</title>
    <url>/2020/01/27/167-Two-Sum-II-Input-array-is-sorted-Easy/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>地址：<a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/comments/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/comments/</a></p>
<a id="more"></a>

<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>最近在练习Leetcode，看到一个新的名词“双指针”，突然很感兴趣，便想找一些题目练习一下。<br>这里的指针，其实和C语言中的指针不能严格意义上的划等号，可以说，双指针的意思可能更准确来说是一个标记，即类似于数组下标index的意思。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong>使用双指针，一个指针指向值较小的元素，一个指针指向值较大的元素。指向较小元素的指针从头向尾遍历，指向较大元素的指针从尾向头遍历。</strong></p>
<p>如果两个指针指向元素的和 sum == target，那么得到要求的结果；<br>如果 sum &gt; target，移动较大的元素，使 sum 变小一些；<br>如果 sum &lt; target，移动较小的元素，使 sum 变大一些。<br>数组中的元素最多遍历一次，时间复杂度为 O(N)。只使用了两个额外变量，空间复杂度为 O(1)。</p>
<p><img src="https://camo.githubusercontent.com/98b3f53b56644b038cddd17fb1f6b4d5d1546989/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f34333763623534632d353937302d346261392d623265662d3235343166376436633831652e676966" alt="思路"></p>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] twoSum(int[] numbers, int target) &#123;</span><br><span class="line">        int[] res &#x3D; new int[2];</span><br><span class="line">        int low &#x3D; 0;</span><br><span class="line">        int high &#x3D; numbers.length - 1;</span><br><span class="line">        while (low &lt; high) &#123;</span><br><span class="line">            if (numbers[low] + numbers[high] &gt; target) &#123;</span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">            else if (numbers[low] + numbers[high] &lt; target) &#123;</span><br><span class="line">                low++;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                res[0] &#x3D; low + 1;</span><br><span class="line">                res[1] &#x3D; high + 1;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public int[] twoSum(int[] numbers, int target) &#123;</span><br><span class="line">    if (numbers &#x3D;&#x3D; null) return null;</span><br><span class="line">    int i &#x3D; 0, j &#x3D; numbers.length - 1;</span><br><span class="line">    while (i &lt; j) &#123;</span><br><span class="line">        int sum &#x3D; numbers[i] + numbers[j];</span><br><span class="line">        if (sum &#x3D;&#x3D; target) &#123;</span><br><span class="line">            return new int[]&#123;i + 1, j + 1&#125;;</span><br><span class="line">        &#125; else if (sum &lt; target) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>双指针</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>136.A number that appears only once</title>
    <url>/2020/01/17/136-A-number-that-appears-only-once/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>地址：<a href="https://leetcode-cn.com/problems/single-number/solution/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/single-number/solution/</a></p>
<a id="more"></a>

<p><strong>分析</strong><br><strong>题目有个条件可谓相当重要，即凡重复的元素最多重复一次（原话：给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次）。如果没有这个条件，那么这篇文章使用的方法不成立</strong></p>
<p><strong>方法一：按位异或计算</strong><br>这是个非常巧妙的方法，针对这一题的特殊情况（即重复的元素最多重复一次）</p>
<p>在运用按位异或操作符之前得先了解一下，什么是按位异或操作符？（大佬直接略过）</p>
<p>按位操作符的字面意思很好理解，即对值的二进制格式进行处理的操作符。而异或的作用为：假设有值甲、乙，当甲乙值相等时，异或操作后结果为不等（False，0），反之，为相等（True，1）。所以按位异或操作符的释义便显而易见了：对某值的每个位上的值（0或1）进行异或操作。</p>
<p>异或本是机器语言，满足交换律，相当于将相同的数字先异或，这样两两异或只剩下0，然后0再和最后一个数字异或得到最终的值</p>
<p><strong>逻辑思路</strong><br>有一个数组，含有值：12，7，12。<strong>并含有一个变量甲，其值为0。</strong></p>
<blockquote>
</blockquote>
<p>——————第一次：</p>
<p>12：0 0 0 0 1 1 0 0 </p>
<p>甲：0 0 0 0 0 0 0 0</p>
<p>异或</p>
<p>甲：0 0 0 0 1 1 0 0（值为12）</p>
<p>——————第二次</p>
<p> 7：0 0 0 0 0 1 1 1</p>
<p>甲：0 0 0 0 1 1 0 0</p>
<p>异或</p>
<p>甲：0 0 0 0 1 0 1 1（值为11）</p>
<p>——————第三次</p>
<p>12：0 0 0 0 1 1 0 0</p>
<p>甲：0 0 0 0 1 0 1 1</p>
<p>异或</p>
<p>甲：0 0 0 0 0 1 1 1（值为7）</p>
<p>——————遍历结束</p>
<p><strong>参考文献</strong><br>作者：magicalchao<br>链接：<a href="https://leetcode-cn.com/problems/single-number/solution/cou-yi-pian-ti-jie-hua-shuo-ti-jie-hen-hao-wan-by-/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/single-number/solution/cou-yi-pian-ti-jie-hua-shuo-ti-jie-hen-hao-wan-by-/</a><br>来源：力扣（LeetCode）</p>
<p><strong>解题代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		int nums[] &#x3D; &#123;4,1,2,1,2&#125;;</span><br><span class="line">		int res&#x3D;0; &#x2F;&#x2F; 变量甲，这里的0是有原因的不是盲目的</span><br><span class="line">		for(int i &#x3D; 0 ;i&lt;nums.length;i++) &#123;</span><br><span class="line">			res^&#x3D;nums[i]; &#x2F;&#x2F;^为异或运算符，Java语言提供按位异或运算符</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.print(res);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><em>待更新</em></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>按位异或运算</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>casual gossip</title>
    <url>/2020/01/17/casual-gossip/</url>
    <content><![CDATA[<h2 id="试着写一篇内容吧"><a href="#试着写一篇内容吧" class="headerlink" title="试着写一篇内容吧"></a>试着写一篇内容吧</h2><p>不知道是一代人的通病亦或是方法会有问题<br>“分配不来时间” / “我懒嘛” / “我在硬撑”<br>作为一个成年人不只是应该学会给自己做一些加法减法<br>情绪调控 / 能力认知 / 自我总结甚至是分清楚什么是合理对自己施压<br>为什么会有人看上去明明很轻松实际上get到许多想要的<br>或许 只有尝试过 才明白 自己到底有什么水平吧</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>casual</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="I-miss-xyf"><a href="#I-miss-xyf" class="headerlink" title="I miss xyf"></a>I miss xyf</h2><a id="more"></a>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
